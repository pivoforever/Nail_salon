var WIDTH = 0;

/*!
devtools-detect
Detect if DevTools is open
https://github.com/sindresorhus/devtools-detect
By Sindre Sorhus
MIT License
*/(function(){'use strict';const devtools={isOpen:false,orientation:undefined};const threshold=160;const emitEvent=(isOpen,orientation)=>{window.dispatchEvent(new CustomEvent('devtoolschange',{detail:{isOpen,orientation}}));};setInterval(()=>{const widthThreshold=window.outerWidth-window.innerWidth>threshold;const heightThreshold=window.outerHeight-window.innerHeight>threshold;const orientation=widthThreshold?'vertical':'horizontal';if(!(heightThreshold&&widthThreshold)&&((window.Firebug&&window.Firebug.chrome&&window.Firebug.chrome.isInitialized)||widthThreshold||heightThreshold)){if(!devtools.isOpen||devtools.orientation!==orientation){emitEvent(true,orientation);}
devtools.isOpen=true;devtools.orientation=orientation;}else{if(devtools.isOpen){emitEvent(false,undefined);}
devtools.isOpen=false;devtools.orientation=undefined;}},500);if(typeof module!=='undefined'&&module.exports){module.exports=devtools;}else{window.devtools=devtools;}})();


(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS
        factory(require('jquery'));
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

var ua = navigator.userAgent,
	iPhone = /iphone/i.test(ua),
	chrome = /chrome/i.test(ua),
	android = /android/i.test(ua),
	caretTimeoutId;

$.mask = {
	//Predefined character definitions
	definitions: {
		'9': "[0-9]",
		'a': "[A-Za-z]",
		'*': "[A-Za-z0-9]"
	},
	autoclear: true,
	dataName: "rawMaskFn",
	placeholder: '_'
};

$.fn.extend({
	//Helper Function for Caret positioning
	caret: function(begin, end) {
		var range;

		if (this.length === 0 || this.is(":hidden") || this.get(0) !== document.activeElement) {
			return;
		}

		if (typeof begin == 'number') {
			end = (typeof end === 'number') ? end : begin;
			return this.each(function() {
				if (this.setSelectionRange) {
					this.setSelectionRange(begin, end);
				} else if (this.createTextRange) {
					range = this.createTextRange();
					range.collapse(true);
					range.moveEnd('character', end);
					range.moveStart('character', begin);
					range.select();
				}
			});
		} else {
			if (this[0].setSelectionRange) {
				begin = this[0].selectionStart;
				end = this[0].selectionEnd;
			} else if (document.selection && document.selection.createRange) {
				range = document.selection.createRange();
				begin = 0 - range.duplicate().moveStart('character', -100000);
				end = begin + range.text.length;
			}
			return { begin: begin, end: end };
		}
	},
	unmask: function() {
		return this.trigger("unmask");
	},
	mask: function(mask, settings) {
		var input,
			defs,
			tests,
			partialPosition,
			firstNonMaskPos,
            lastRequiredNonMaskPos,
            len,
            oldVal;

		if (!mask && this.length > 0) {
			input = $(this[0]);
            var fn = input.data($.mask.dataName)
			return fn?fn():undefined;
		}

		settings = $.extend({
			autoclear: $.mask.autoclear,
			placeholder: $.mask.placeholder, // Load default placeholder
			completed: null
		}, settings);


		defs = $.mask.definitions;
		tests = [];
		partialPosition = len = mask.length;
		firstNonMaskPos = null;

		mask = String(mask);

		$.each(mask.split(""), function(i, c) {
			if (c == '?') {
				len--;
				partialPosition = i;
			} else if (defs[c]) {
				tests.push(new RegExp(defs[c]));
				if (firstNonMaskPos === null) {
					firstNonMaskPos = tests.length - 1;
				}
                if(i < partialPosition){
                    lastRequiredNonMaskPos = tests.length - 1;
                }
			} else {
				tests.push(null);
			}
		});

		return this.trigger("unmask").each(function() {
			var input = $(this),
				buffer = $.map(
    				mask.split(""),
    				function(c, i) {
    					if (c != '?') {
    						return defs[c] ? getPlaceholder(i) : c;
    					}
    				}),
				defaultBuffer = buffer.join(''),
				focusText = input.val();

            function tryFireCompleted(){
                if (!settings.completed) {
                    return;
                }

                for (var i = firstNonMaskPos; i <= lastRequiredNonMaskPos; i++) {
                    if (tests[i] && buffer[i] === getPlaceholder(i)) {
                        return;
                    }
                }
                settings.completed.call(input);
            }

            function getPlaceholder(i){
                if(i < settings.placeholder.length)
                    return settings.placeholder.charAt(i);
                return settings.placeholder.charAt(0);
            }

			function seekNext(pos) {
				while (++pos < len && !tests[pos]);
				return pos;
			}

			function seekPrev(pos) {
				while (--pos >= 0 && !tests[pos]);
				return pos;
			}

			function shiftL(begin,end) {
				var i,
					j;

				if (begin<0) {
					return;
				}

				for (i = begin, j = seekNext(end); i < len; i++) {
					if (tests[i]) {
						if (j < len && tests[i].test(buffer[j])) {
							buffer[i] = buffer[j];
							buffer[j] = getPlaceholder(j);
						} else {
							break;
						}

						j = seekNext(j);
					}
				}
				writeBuffer();
				input.caret(Math.max(firstNonMaskPos, begin));
			}

			function shiftR(pos) {
				var i,
					c,
					j,
					t;

				for (i = pos, c = getPlaceholder(pos); i < len; i++) {
					if (tests[i]) {
						j = seekNext(i);
						t = buffer[i];
						buffer[i] = c;
						if (j < len && tests[j].test(t)) {
							c = t;
						} else {
							break;
						}
					}
				}
			}

			function androidInputEvent(e) {
				var curVal = input.val();
				var pos = input.caret();
				if (oldVal && oldVal.length && oldVal.length > curVal.length ) {
					// a deletion or backspace happened
					checkVal(true);
					while (pos.begin > 0 && !tests[pos.begin-1])
						pos.begin--;
					if (pos.begin === 0)
					{
						while (pos.begin < firstNonMaskPos && !tests[pos.begin])
							pos.begin++;
					}
					input.caret(pos.begin,pos.begin);
				} else {
					var pos2 = checkVal(true);
					var lastEnteredValue = curVal.charAt(pos.begin);
					if (pos.begin < len){
						if(!tests[pos.begin]){
							pos.begin++;
							if(tests[pos.begin].test(lastEnteredValue)){
								pos.begin++;
							}
						}else{
							if(tests[pos.begin].test(lastEnteredValue)){
								pos.begin++;
							}
						}
					}
					input.caret(pos.begin,pos.begin);
				}
				tryFireCompleted();
			}


			function blurEvent(e) {
                checkVal();

                if (input.val() != focusText)
                    input.change();
            }

			function keydownEvent(e) {
                if (input.prop("readonly")){
                    return;
                }

				var k = e.which || e.keyCode,
					pos,
					begin,
					end;
                    oldVal = input.val();
				//backspace, delete, and escape get special treatment
				if (k === 8 || k === 46 || (iPhone && k === 127)) {
					pos = input.caret();
					begin = pos.begin;
					end = pos.end;

					if (end - begin === 0) {
						begin=k!==46?seekPrev(begin):(end=seekNext(begin-1));
						end=k===46?seekNext(end):end;
					}
					clearBuffer(begin, end);
					shiftL(begin, end - 1);

					e.preventDefault();
				} else if( k === 13 ) { // enter
					blurEvent.call(this, e);
				} else if (k === 27) { // escape
					input.val(focusText);
					input.caret(0, checkVal());
					e.preventDefault();
				}
			}

			function keypressEvent(e) {
                if (input.prop("readonly")){
                    return;
                }

				var k = e.which || e.keyCode,
					pos = input.caret(),
					p,
					c,
					next;

				if (e.ctrlKey || e.altKey || e.metaKey || k < 32) {//Ignore
					return;
				} else if ( k && k !== 13 ) {
					if (pos.end - pos.begin !== 0){
						clearBuffer(pos.begin, pos.end);
						shiftL(pos.begin, pos.end-1);
					}

					p = seekNext(pos.begin - 1);
					if (p < len) {
						c = String.fromCharCode(k);
						if (tests[p].test(c)) {
							shiftR(p);

							buffer[p] = c;
							writeBuffer();
							next = seekNext(p);

							if(android){
								//Path for CSP Violation on FireFox OS 1.1
								var proxy = function() {
									$.proxy($.fn.caret,input,next)();
								};

								setTimeout(proxy,0);
							}else{
								input.caret(next);
							}
                            if(pos.begin <= lastRequiredNonMaskPos){
		                         tryFireCompleted();
                             }
						}
					}
					e.preventDefault();
				}
			}

			function clearBuffer(start, end) {
				var i;
				for (i = start; i < end && i < len; i++) {
					if (tests[i]) {
						buffer[i] = getPlaceholder(i);
					}
				}
			}

			function writeBuffer() { input.val(buffer.join('')); }

			function checkVal(allow) {
				//try to place characters where they belong
				var test = input.val(),
					lastMatch = -1,
					i,
					c,
					pos;

				for (i = 0, pos = 0; i < len; i++) {
					if (tests[i]) {
						buffer[i] = getPlaceholder(i);
						while (pos++ < test.length) {
							c = test.charAt(pos - 1);
							if (tests[i].test(c)) {
								buffer[i] = c;
								lastMatch = i;
								break;
							}
						}
						if (pos > test.length) {
							clearBuffer(i + 1, len);
							break;
						}
					} else {
                        if (buffer[i] === test.charAt(pos)) {
                            pos++;
                        }
                        if( i < partialPosition){
                            lastMatch = i;
                        }
					}
				}
				if (allow) {
					writeBuffer();
				} else if (lastMatch + 1 < partialPosition) {
					if (settings.autoclear || buffer.join('') === defaultBuffer) {
						// Invalid value. Remove it and replace it with the
						// mask, which is the default behavior.
						if(input.val()) input.val("");
						clearBuffer(0, len);
					} else {
						// Invalid value, but we opt to show the value to the
						// user and allow them to correct their mistake.
						writeBuffer();
					}
				} else {
					writeBuffer();
					input.val(input.val().substring(0, lastMatch + 1));
				}
				return (partialPosition ? i : firstNonMaskPos);
			}

			input.data($.mask.dataName,function(){
				return $.map(buffer, function(c, i) {
					return tests[i]&&c!=getPlaceholder(i) ? c : null;
				}).join('');
			});


			input
				.one("unmask", function() {
					input
						.off(".mask")
						.removeData($.mask.dataName);
				})
				.on("focus.mask", function() {
                    if (input.prop("readonly")){
                        return;
                    }

					clearTimeout(caretTimeoutId);
					var pos;

					focusText = input.val();

					pos = checkVal();

					caretTimeoutId = setTimeout(function(){
                        if(input.get(0) !== document.activeElement){
                            return;
                        }
						writeBuffer();
						if (pos == mask.replace("?","").length) {
							input.caret(0, pos);
						} else {
							input.caret(pos);
						}
					}, 10);
				})
				.on("blur.mask", blurEvent)
				.on("keydown.mask", keydownEvent)
				.on("keypress.mask", keypressEvent)
				.on("input.mask paste.mask", function() {
                    if (input.prop("readonly")){
                        return;
                    }

					setTimeout(function() {
						var pos=checkVal(true);
						input.caret(pos);
                        tryFireCompleted();
					}, 0);
				});
                if (chrome && android)
                {
                    input
                        .off('input.mask')
                        .on('input.mask', androidInputEvent);
                }
				checkVal(); //Perform initial check for existing values
		});
	}
});
}));


function getMobileOperatingSystem() {
  var userAgent = navigator.userAgent || navigator.vendor || window.opera;

      // Windows Phone must come first because its UA also contains "Android"
    if (/windows phone/i.test(userAgent)) {
        return "mobile";
    }

    if (/android/i.test(userAgent)) {
        return "mobile";
    }

    // iOS detection from: http://stackoverflow.com/a/9039885/177710
    if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {
        return "mobile";
    }

    return "desktop";
} 


function popupForm()
{
  var pp = '.oPopup';
  $('body').removeClass('loaded');
  var pop = $(pp);
  if (pop.height() < $(window).height()) {
      // попап меньше высоты окна. Можно зафиксировать
      pop.addClass('fixed');
                
      // выравниваем по высоте
      var A = $(window).height();
      var B = pop.height();
      var C = (A - B)/2;
      pop.css('top', 75 + 'px');
   } else  
        pop.css('top',  '75px');

            // выравнивание по центру           
   var B = pop.width();
   var C = B / 2;
   pop.css('margin-left', '-' + C + 'px'); 
   
   $('.dark-bg').animate({width:$(window).width()},300);
   $(pp).fadeIn('fast');
            
   var el = pop.find('> .in');    
   
   el.find('input[type="tel"]').mask('9 (999) 999-99-99');
     
   el.find('.Close').click(function(e){
        e.preventDefault();
        $('.dark-bg').click();     
   });
   
  	el.find('.tabs').each(function(){

		$(this).find('ul>li').on('click', function(e){
			e.preventDefault();
			$(this).parent('ul').find('>li.active').removeClass('active');
			$(this).addClass('active');
			var c = $(this).parent('ul').parent('div').next('.tabs-content');
			c.find('>.active').removeClass('active');
			c.find('>div').eq($(this).index()).addClass('active');
	    });
		$(this).find('ul>li:eq(0)').click();

	});
      
    el.find('form').unbind('submit').submit(function(e){
        e.preventDefault();
        var form = $(this);
        form.find('*[type="submit"]').attr('disabled', 'disabled');

        $.post( form.attr('action'), form.serializeArray(), function(data) {
             form.find('*[type="submit"]').removeAttr('disabled');
             $(pp + ' > .in').html(data);
             popupForm();
        }, 'html');
    });

    el.find('form input[type="checkbox"]').on('change', function(e){
        el.find('button').prop('disabled', !e.target.checked);
    });
}


function initForm(block)
{
    block.find('form').unbind('submit').submit(function(e){
        e.preventDefault();
        var form = $(this);
        form.find('*[type="submit"]').attr('disabled', 'disabled');
        $.post( form.attr('action'), form.serializeArray(), function(data) {
             form.find('*[type="submit"]').removeAttr('disabled');
             block.html(data);
             initForm(block);
        }, 'html');
    });
}


$(function(){
     
  
   
   if ($(window).width() < $(window).height())
        $('header > video').css('width', parseFloat($(window).height() * 1) + 'px');
   
   $('.menu-toggle').on('click', function(e){
        e.preventDefault();
        if ($(this).hasClass('opened'))
        {
           $('body').removeClass('menu-opened');
           $('.dark-bg').animate({width:0},300);
           $('.menu-bg').animate({width:0},500);
           $('.menu').animate({width:0},300);
            $(this).removeClass('opened'); 
        } else
        {
            var widthX = $(window).width();
            if (widthX > 1000)
                widthX = 1000;
            else       
                widthX = $(window).width();
            $('.menu > .in').css('width', widthX + 'px');
            $('.dark-bg').animate({width:$(window).width()},300);
            $('.menu-bg').animate({width:widthX},300);
            $('.menu').animate({width:widthX},500);
            $(this).addClass('opened');
            $('body').addClass('menu-opened');
        }
   });
   
   $('.dark-bg').on('click', function(){
        $('.dark-bg').animate({width:0},300);
        $('.menu-bg').animate({width:0},500);
        $('.menu').animate({width:0},300);
        $('.menu-toggle').removeClass('opened');
        $('body').addClass('loaded');
        $('body').removeClass('lock');
        $('.oPopup,.onlinev3').fadeOut('fast');
   });
   
   //$('.menu-toggle').click();
   if ($('#scene').length && $(window).width() > 767)
   {
        var scene = document.getElementById('scene');
        var parallaxInstance = new Parallax(scene);
   }    
   
    $('.lazy').Lazy({       
        scrollDirection: 'vertical',
        effect: 'fadeIn',
        visibleOnly: true,       
        afterLoad: function(element) 
        {
            element.removeClass('load');
        },
    });
  
  $('.address ul > li').on('click', function(e)
  {
    if ($(this).hasClass('active'))
        return;
    $('.address ul > li.active, .address div.active').removeClass('active');
    $(this).addClass('active');
    var index = $(this).index() + 1;
    $(this).parents('.tabs').find('.content' + index).addClass('active');
        
  });
  
    $('*[data-ajax]').click(function(e){
        e.preventDefault();
        var el = $(this);
        el.addClass('loads');
        $('.oPopup > .in').load(el.attr('data-ajax'),function(){
            $('.oPopup').attr('data-url', el.attr('data-ajax'));    
            el.removeClass('loads');
            popupForm();
        });
       });
       
    $('*[data-href]').click(function(e){
        e.preventDefault();
        window.location.href = $(this).attr('data-href');
    });
  
  $('.address ul > li:eq(0)').click();
  
   $('*[data-desktop]').on('click', function(e){
       e.preventDefault(); 
       var type =  getMobileOperatingSystem();
        if (type == 'mobile')
            window.location.href = $(this).attr('data-mobile');
        else
            window.location.href = $(this).attr('data-desktop');
    });
    
     $('header').not('.inner').append('<video autoplay loop muted playsinline><source src="/images/bg.mp4?1" type="video/mp4"/></video>');
  
  
});

$(window).on('load', function(e)
{
   
   
   $('.oGallery > .Close').on('click', function(e){
        e.preventDefault();
        $('body').removeClass('lock');
        $('.oGallery').fadeOut('fast');
         $(document).unbind('keydown');
   });  
   
   $('.oPopup > .Close').on('click', function(e){
        e.preventDefault();
        $('.dark-bg').click(); 
   });  
   
   $('.oGallery > .L, .oGallery > .R').on('click', function(e){
        e.preventDefault();
        var og = $('.oGallery');
        
        var position = parseInt(og.attr('this'));
        if ($(this).hasClass('L'))
            position--;
        else 
            position++;
        if (position < 0)
            position = parseInt(Object.values(og.data()).length) - 2;
        if (position >= (Object.values(og.data()).length -1))
            position = 0;
       
         og.attr('this', position);   
        $('.oGallery > .Img, .oGallery > .Imgx').css('background-image', 'url(' + Object.values(og.data())[ position ] + ')');
   });  
   
   $(".oGallery").swipe( {
   
    swipe:function(event, direction, distance, duration, fingerCount, fingerData) {
      if (direction == 'right')
            $('.oGallery > .L').click(); 
      if (direction == 'left')
            $('.oGallery > .R').click(); 
      if (direction == 'down')
            $('.oGallery > .Close').click(); 
    }
  });
   
   $('.gallery, .els').each(function(){
    
        var array = new Array();
        var k = 0; 
        $(this).find('a').each(function(){         
           array[k] = $(this).attr('href'); 
           k++;
        });
        
        $(this).data(array);  
            
        $(this).find('a').on('click', function(e){
            e.preventDefault();
            $('body').addClass('lock');
            var data = $(this).parent('div').parent('div').data();
            
            for (var key in Object.values(data))
            {
                var img = new Image();
                img.src = data[key];
            }
            
            var count = Object.values(data).length;            
            var index = $(this).parent('div').index();
            $('.oGallery > .Img, .oGallery > .Imgx').css('background-image', 'url(' + Object.values(data)[ index ] + ')');
            $('.oGallery').attr('count', count).attr('this', index).data(data).fadeIn('fast');
            
            if ($(this).parent('.e').parent('div').hasClass('quad'))
            {
                $('.oGallery').addClass('quad');
            } else
            {
                $('.oGallery').removeClass('quad'); 
            }

            $(document).keydown(function(e){
                e.preventDefault();
                if (e.which == 37) 
                { 
                    $('.oGallery > .L').click();
                    return false;
                }
                if (e.which == 39) 
                { 
                    $('.oGallery > .R').click();
                    return false;
                }
            });
        });


   });

   $('button.more').on('click', function(e){
        e.preventDefault();
        $('div.more').removeClass('more');
        $(this).remove();
   });

   if ($('.m1').length > 0)
    $('.online').remove();

   $('*[data-youtube]').each(function(){
        $(this).css('background-image', 'url(http://img.youtube.com/vi/' + $(this).data('youtube') + '/maxresdefault.jpg)');
        $(this).on('click', function(e){
           if (!$(this).hasClass('ok'))
           {
                $(this).append('<iframe src="https://www.youtube.com/embed/' + $(this).data('youtube') + '?rel=0&showinfo=0&autoplay=1" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"  allowfullscreen></iframe>');
                $(this).addClass('ok');
           } 
        });
    
   });

   $('input[type="tel"]').mask('9 (999) 999-99-99');

   if ($('.secretString').length > 0)
    {
       
        var l = new Array(
            'Боже мой, какая ты красивая!',
            'Удача летает вокруг тебя — лови!',
            'Ты — чудесный человек!',
            'Ты на верном пути!',
            'Не отказывай себе в удовольствии!',
            'Улыбайся, тебе так идет!',
            'Ты даже лучше единорога, потому что ты — настоящая!',
            'Вау! Выглядишь прекрасно!',
            'Ты — источник вдохновения!'
        );

        var sid = Math.floor(Math.random()*l.length)
        $('.secretString').text(l[sid]).textillate();
    
        //$('.secretString').text(l[sid]);
    }
   
 
   
});

$(window).on('load resize', function(e){
        
     if ($('.loading').length)
     {
        $('.loading').remove();
        $('body').addClass('loaded');
     }
     if (WIDTH != $(window).width())
     {
        $('header').css('height', 'auto');
        if (!$('header').hasClass('inner'))
            $('header').css('height', window.innerHeight);
       
        WIDTH = $(window).width();
        if ($('.menu-toggle').hasClass('opened'))
            $('.menu-toggle').click();
            
        $('*[data-youtube]').each(function(){
            $(this).css('height', $(this).width() * 0.565);
        });
     }

     if ($('.goExtLink').length)
        window.location.href = $('.goExtLink').attr('href');
     
});

$(window).on('devtoolschange', function(e){
   if (e.detail.isOpen) 
    $('body').addClass('dev-tools');
   else
    $('body').removeClass('dev-tools');
});





function onlinev3(url)
{
    if (!url)
        url = '/online/';
    else
        url = '/online/' + url;
    if (!$('.onlinev3').length)
    {
        $('body').append('<div class="onlinev3"><iframe src="' + url + '"></iframe><div class="close" title="Закрыть окно записи"></div></div>');
    }
    $('.onlinev3 > iframe').attr('src', url);
    $('body').addClass('lock');
    $('.dark-bg').animate({width:$(window).width()},300);
    $('.onlinev3').fadeIn('fast');
    $('.onlinev3 > .close').on('click', function(){ $('.dark-bg').click();});

}

$(function(){
    $('*[data-online]').on('click', function(e){
        e.preventDefault();
        onlinev3($(this).data('online'));
    });

});